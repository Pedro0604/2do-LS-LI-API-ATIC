@inject AgregarVehiculoUseCase AgregarVehiculoUseCase;
@inject ModificarVehiculoUseCase ModificarVehiculoUseCase;
@inject GetVehiculoUseCase GetVehiculoUseCase;

<div>
@if(Modificar){
    <h1>Modificar al vehículo: @_vehiculo.Dominio</h1>
}
else{
<h1>Agregar un vehículo</h1>
}
<input type="text" placeholder="Dominio" @bind="_vehiculo.Dominio">
<input type="text" placeholder="Marca" @bind="_vehiculo.Marca">
<input type="number" placeholder="AñoFabricacion" @bind="_vehiculo.AñoFabricacion">
<input type="number" placeholder="Id del titular" @bind="_vehiculo.TitularId">
<button @onclick="Cerrar">@if(Modificar){<span>Modificar</span>}else{<span>Agregar</span>}</button>
</div>

@code{
    [Parameter] public int Id {get; set;}
    [Parameter] public EventCallback CerrarDialogo{get; set;}
    [Parameter] public EventCallback OnError{get; set;}
    public string? MensajeError {get; private set; }
    public bool Modificar {get; set;} = false;
    Vehiculo _vehiculo = new Vehiculo();

    protected override void OnParametersSet() 
    {
        if(Id != 0){
            var vehiculoEcontrado = GetVehiculoUseCase.Ejecutar(Id);
            if(vehiculoEcontrado != null)
            {
                _vehiculo = vehiculoEcontrado;
                Modificar = true;
            }
        }
    }
    void Cerrar(){
        Error error;
        if(Modificar)
        {
            error = ModificarVehiculoUseCase.Ejecutar(_vehiculo);
        }
        else{
            error = AgregarVehiculoUseCase.Ejecutar(_vehiculo);
        }

        if(error.Mensaje != "")
        {
            MensajeError = error.Mensaje;
            OnError.InvokeAsync();
        }
        else
        {
            CerrarDialogo.InvokeAsync();
        }
    }
}