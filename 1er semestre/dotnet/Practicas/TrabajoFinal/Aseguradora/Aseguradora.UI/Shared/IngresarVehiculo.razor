@inject AgregarVehiculoUseCase AgregarVehiculoUseCase;
@inject ModificarVehiculoUseCase ModificarVehiculoUseCase;
@inject GetVehiculoUseCase GetVehiculoUseCase;

@if(Visible){
    <div>
        @if(_modificar){
            <h1>Modificar al vehículo: @_vehiculo.Dominio</h1>
        }
        else{
            <h1>Agregar un vehículo</h1>
        }
        <input type="text" placeholder="Dominio" @bind="_vehiculo.Dominio">
        <input type="text" placeholder="Marca" @bind="_vehiculo.Marca">
        <input type="number" placeholder="AñoFabricacion" @bind="_vehiculo.AñoFabricacion">
        <input type="number" placeholder="Id del titular" @bind="_vehiculo.TitularId">
        <button @onclick="Cerrar">@if(_modificar){<span>Modificar</span>}else{<span>Agregar</span>}</button>
    </div>
}

@code{
    [Parameter] public int Id {get; set;}
    [Parameter] public EventCallback CerrarDialogo{get; set;}
    [Parameter] public EventCallback<string> OnError{get; set;}
    [Parameter] public bool Visible {get; set;} = false;
    public bool _modificar {get; set;} = false;
    Vehiculo _vehiculo = new Vehiculo();

    protected override void OnParametersSet() 
    {
        if(Id != 0){
            var _vehiculo = GetVehiculoUseCase.Ejecutar(Id);
            if(_vehiculo != null)_modificar = true;
        }
    }
    void Cerrar(){
        Error error;
        error = _modificar ?ModificarVehiculoUseCase.Ejecutar(_vehiculo) : AgregarVehiculoUseCase.Ejecutar(_vehiculo);

        if(error.Mensaje != "") OnError.InvokeAsync(error.Mensaje);
        else CerrarDialogo.InvokeAsync();
    }
}